[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "momaland"
description="A standard API for Multi-Objective Multi-Agent Decision making and a diverse set of reference environments."
readme = "README.md"
requires-python = ">= 3.8"
authors = [
    {name="Florian Felten", email="florian.felten@uni.lu"},
    {name="Umut Ucak"},
    {name="Hicham Azmani"},
    {name="Roxana Radulescu", email="roxana.radulescu@vub.be"},
    {name="Hendrik J. S. Baier", email="h.j.s.baier@tue.nl"},
    {name="Willem RÃ¶pke", email="willem.ropke@vub.be"},
    {name="Patrick Mannion", email="patrick.mannion@universityofgalway.ie"},
    {name="Diederik M. Roijers",email="diederik.roijers@vub.be"},
]
license = { text = "GNU General Public License v3.0" }
keywords = ["Reinforcement Learning", "Multi-Objective", "Multi-Agent", "RL", "AI", "gymnasium", "pettingzoo"]
classifiers = [
    "Development Status :: 4 - Beta",  # change to `5 - Production/Stable` when ready
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    'Intended Audience :: Science/Research',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
]
dependencies = [
    "gymnasium >=0.28",
    "pettingzoo[sisl,butterfly] >=1.24",
    "numpy >=1.21.0",
    "networkx >=3.1",
    "sympy >=1.12",
    "pygame >=2.6.0",
    "PyOpenGL >=3.1.6",
    "PyOpenGL-accelerate >=3.1.1",
    "pillow >=8.3.1",
    "wandb >=0.16.1",
]
dynamic = ["version"]

[project.optional-dependencies]
# Update dependencies in `all` if any are added or removed
learning = [
    "jax >=0.4.13",
    "chex >=0.1",
    "distrax >= 0.1.3",
    "flax >=0.6",
    "optax >=0.1",
    "orbax-checkpoint >=0.2.3",
    "chex >=0.1",
    "etils >=1.3",
    "supersuit >=3.9",
    "tqdm >=4.66.1",
    "pandas >=2.0.3",
    "matplotlib >=3.7.4",
    "morl_baselines[all]",
    "pycddlib==2.1.6",
]
all = [
    # All dependencies above except accept-rom-license
    # NOTE: No need to manually remove the duplicates, setuptools automatically does that
    "jax >=0.4.13",
    "chex >=0.1",
    "distrax >=0.1.3",
    "flax >=0.6",
    "optax >=0.1",
    "orbax-checkpoint >=0.2.3",
    "chex >=0.1",
    "etils >=1.3",
    "supersuit >=3.9",
    "tqdm >=4.66.1",
    "pandas >=2.0.3",
    "matplotlib >=3.7.4",
    "morl_baselines[all]",
    "pycddlib==2.1.6",
]
testing = ["pytest ==7.1.3"]

[project.urls]
Homepage = "https://github.com/rradules/momaland/tree/main"
Repository = "https://github.com/rradules/momaland/tree/main"
Documentation = "https://github.com/rradules/momaland/tree/main"
"Bug Report" = "https://github.com/rradules/momaland/tree/main/issues"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["momaland", "momaland.*"]

[tool.setuptools.package-data]
momaland = [
    "**/*.json",
    "**/assets/*",
    "py.typed",
]

# Linters and Test tools #######################################################

[tool.black]
line-length = 127
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
atomic = true
profile = "black"
src_paths = ["momaland", "tests", "docs/scripts"]
extra_standard_library = ["typing_extensions"]
indent = 4
lines_after_imports = 2
multi_line_output = 3

[tool.pyright]
include = ["momaland/**", "tests/**"]
exclude = ["**/node_modules", "**/__pycache__"]
strict = []

typeCheckingMode = "basic"
pythonVersion = "3.8"
pythonPlatform = "All"
typeshedPath = "typeshed"
enableTypeIgnoreComments = true

# This is required as the CI pre-commit does not download the module (i.e. numpy, pygame)
#   Therefore, we have to ignore missing imports
reportMissingImports = "none"
# Some modules are missing type stubs, which is an issue when running pyright locally
reportMissingTypeStubs = false
# For warning and error, will raise an error when
reportInvalidTypeVarUse = "none"

# reportUnknownMemberType = "warning"  # -> raises warnings
# reportUnknownParameterType = "warning"  # -> raises warnings
# reportUnknownVariableType = "warning"  # -> raises warnings
# reportUnknownArgumentType = "warning"  # -> raises warnings
reportGeneralTypeIssues = "none"  # -> commented out raises 489
reportOptionalSubscript = "none"
#reportAbstractUsage = "none"
#reportArgumentType= "none"
#reportAssertTypeFailure= "none"
#reportAssignmentType= "none"
#reportAttributeAccessIssue= "none"
#reportCallIssue= "none"
#reportInconsistentOverload = "none"
#reportIndexIssue = "none"
#reportInvalidTypeArguments = "none"
#reportInvalidTypeForm = "none"
#reportNoOverloadImplementation = "none"
#reportOperatorIssue = "none"
#reportPossiblyUnboundVariable = "none"
#reportRedeclaration = "none"
#reportReturnType = "none"
#reportUnusedExcept = "none"

reportUntypedFunctionDecorator = "none"  # -> pytest.mark.parameterize issues

reportOptionalMemberAccess = "none" # -> commented out raises warnings
reportPrivateImportUsage = "warning" # -> this raises warnings because we use not exported modules from gym (wrappers)

reportPrivateUsage = "warning"
reportUnboundVariable = "warning"

[tool.pytest.ini_options]
filterwarnings = ['ignore:.*The environment .* is out of date.*']
norecursedirs = [
    "momaland",
]
# filterwarnings = ['ignore:.*step API.*:DeprecationWarning']
